// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String
  password String
  comments_ow Comment_ow[]
  comments_val Comment_val[]
  votes_ow Vote_ow[]
  votes_val Vote_val[]
  replies_ow Reply_ow[] @relation("UserReplies")
  replies_val Reply_val[] @relation("UserRepliesVal")
  repliesTo_ow Reply_ow[] @relation("UserRepliedTo")
  repliesTo_val Reply_val[] @relation("UserRepliedToVal")
}

model Patchnotes_ow {
  id Int @id @default(autoincrement())
  text String
  Tanks Tank[]
  Damages Damage[]
  Supports Support[]
  Maps OwMap[]
  Bugs OwBug[]
  comments Comment_ow[]
}

model Tank {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_ow @relation(fields: [patchId], references: [id])
}

model Damage {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_ow @relation(fields: [patchId], references: [id])
}

model Support {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_ow @relation(fields: [patchId], references: [id])
}

model OwMap {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_ow @relation(fields: [patchId], references: [id])
}

model OwBug {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_ow @relation(fields: [patchId], references: [id])
}

model Patchnotes_val {
  id Int @id @default(autoincrement())
  text String
  Agents Agent[]
  Maps ValMap[]
  Bugs ValBug[]
  comments Comment_val[]
}

model Agent {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_val @relation(fields: [patchId], references: [id])
}

model ValMap {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_val @relation(fields: [patchId], references: [id])
}

model ValBug {
  id Int @id @default(autoincrement())
  patchId Int
  text String
  patchnote Patchnotes_val @relation(fields: [patchId], references: [id])
}

model Comment_ow {
  id Int @id @default(autoincrement())
  message String
  voteCount Int @default(0)
  votes_ow Vote_ow[]
  patchnotes_ow Patchnotes_ow @relation(fields:[patchId], references:[id])
  patchId Int
  user User @relation(fields:[userId], references:[id])
  userId Int
  replies       Reply_ow[]
}

model Comment_val {
  id Int @id @default(autoincrement())
  message String
  voteCount Int @default(0)
  votes_val Vote_val[]
  patchnotes_val Patchnotes_val @relation(fields:[patchId], references:[id])
  patchId Int
  user User @relation(fields:[userId], references:[id])
  userId Int
  replies       Reply_val[]
}

model Vote_ow {
  id Int @id @default(autoincrement())
  user User @relation(fields:[userId], references:[id])
  userId Int
  comment Comment_ow @relation(fields:[commentId], references:[id])
  commentId Int
}

model Vote_val {
  id Int @id @default(autoincrement())
  user User @relation(fields:[userId], references:[id])
  userId Int
  comment Comment_val @relation(fields:[commentId], references:[id])
  commentId Int
}

model Reply_ow {
  id Int @id @default(autoincrement())
  message String
  userId Int
  user User @relation(name: "UserReplies", fields: [userId], references: [id])
  commentId Int
  comment Comment_ow @relation(fields: [commentId], references: [id])
  parentReplyId Int?
  parentReply Reply_ow? @relation("ParentReply", fields: [parentReplyId], references: [id])
  replyToId Int
  replyTo User @relation(name: "UserRepliedTo", fields: [replyToId], references: [id])
  replies Reply_ow[] @relation("ParentReply")
}

model Reply_val {
  id Int @id @default(autoincrement())
  message String
  userId Int
  user User @relation(name: "UserRepliesVal", fields: [userId], references: [id])
  commentId Int
  comment Comment_val @relation(fields: [commentId], references: [id])
  parentReplyId Int?
  parentReply Reply_val? @relation("ParentReply", fields: [parentReplyId], references: [id])
  replyToId Int
  replyTo User @relation(name: "UserRepliedToVal", fields: [replyToId], references: [id])
  replies Reply_val[]  @relation("ParentReply")
}
