// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String
  password String
  comments_ow Comment_ow[]
  comments_lol Comment_lol[]
  votes_ow Vote_ow[]
  votes_lol Vote_lol[]
  replies_ow Reply_ow[] @relation("UserReplies")
  replies_lol Reply_lol[] @relation("UserRepliesLoL")
  repliesTo_ow Reply_ow[] @relation("UserRepliedTo")
  repliesTo_lol Reply_lol[] @relation("UserRepliedToLoL")
}

model Patchnotes_ow {
  id Int @id @default(autoincrement())
  text String
  details Json
  comments Comment_ow[]
}

model Patchnotes_lol {
  id Int @id @default(autoincrement())
  text String
  details Json
  comments Comment_lol[]
}

model Comment_ow {
  id Int @id @default(autoincrement())
  message String
  voteCount Int @default(0)
  votes_ow Vote_ow[]
  patchnotes_ow Patchnotes_ow @relation(fields: [patchId], references: [id])
  patchId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  replies Reply_ow[]
}

model Comment_lol {
  id Int @id @default(autoincrement())
  message String
  voteCount Int @default(0)
  votes_lol Vote_lol[]
  patchnotes_lol Patchnotes_lol @relation(fields: [patchId], references: [id])
  patchId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  replies Reply_lol[]
}

model Vote_ow {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  comment Comment_ow @relation(fields: [commentId], references: [id])
  commentId Int
}

model Vote_lol {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  comment Comment_lol @relation(fields: [commentId], references: [id])
  commentId Int
}

model Reply_ow {
  id Int @id @default(autoincrement())
  message String
  userId Int
  user User @relation(name: "UserReplies", fields: [userId], references: [id])
  commentId Int
  comment Comment_ow @relation(fields: [commentId], references: [id])
  parentReplyId Int?
  parentReply Reply_ow? @relation("ParentReply", fields: [parentReplyId], references: [id])
  replyToId Int
  replyTo User @relation(name: "UserRepliedTo", fields: [replyToId], references: [id])
  replies Reply_ow[] @relation("ParentReply")
}

model Reply_lol {
  id Int @id @default(autoincrement())
  message String
  userId Int
  user User @relation(name: "UserRepliesLoL", fields: [userId], references: [id])
  commentId Int
  comment Comment_lol @relation(fields: [commentId], references: [id])
  parentReplyId Int?
  parentReply Reply_lol? @relation("ParentReply", fields: [parentReplyId], references: [id])
  replyToId Int
  replyTo User @relation(name: "UserRepliedToLoL", fields: [replyToId], references: [id])
  replies Reply_lol[] @relation("ParentReply")
}

model Association {
  id Int @id @default(autoincrement())
  nerf Json
  buff Json
}
